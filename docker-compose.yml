# version: "3.8"
services:
  # Redis service (for Celery)
  redis:
    image: redis:latest
    container_name: careconnected_redis
    ports:
      - "6379:6379"
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 3s
      retries: 5

  # Backend service (Django)
  backend:
    build: ./backend
    container_name: careconnected_backend
    ports:
      - "8001:8001"
    env_file:
      - .env
    volumes:
      - ./backend:/app  # Mount the backend code for live changes
    depends_on:
      redis:
        condition: service_healthy  # Wait for Redis to be ready
    command: ["gunicorn", "backend.wsgi:application", "--bind", "0.0.0.0:8001"]
  # Celery worker for backend tasks
  celery:
    build: ./backend
    container_name: careconnected_celery
    env_file:
      - .env
    depends_on:
      redis:
        condition: service_healthy
    command: ["celery", "-A", "backend", "worker", "--loglevel=info"]
    volumes:
      - ./backend:/app

  # Frontend service (Vue)
  frontend:
    build: ./frontend
    container_name: careconnected_frontend
    ports:
      - "5173:5173"
    volumes:
      - ./frontend:/app  # Mount the frontend code for live changes
      - node_modules:/app/node_modules  # Use a named volume for node_modules
    command: ["npm", "run", "dev", "--", "--host", "0.0.0.0"]
    depends_on:
      backend:
        condition: service_started  # Wait for the backend to start

volumes:
  node_modules:


# The commented out section below is an example of how to define a PostgreSQL
# database that your application can use. `depends_on` tells Docker Compose to
# start the database before your application. The `db-data` volume persists the
# database data between container restarts. The `db-password` secret is used
# to set the database password. You must create `db/password.txt` and add
# a password of your choosing to it before running `docker compose up`.
#     depends_on:
#       db:
#         condition: service_healthy
#   db:
#     image: postgres
#     restart: always
#     user: postgres
#     secrets:
#       - db-password
#     volumes:
#       - db-data:/var/lib/postgresql/data
#     environment:
#       - POSTGRES_DB=example
#       - POSTGRES_PASSWORD_FILE=/run/secrets/db-password
#     expose:
#       - 5432
#     healthcheck:
#       test: [ "CMD", "pg_isready" ]
#       interval: 10s
#       timeout: 5s
#       retries: 5
# volumes:
#   db-data:
# secrets:
#   db-password:
#     file: db/password.txt

